name: 'Release: Test Manual'

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - nightly
        default: 'patch'
      dry_run:
        description: 'Dry run (no actual release)'
        required: true
        type: boolean
        default: true

jobs:
  release:
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'write'
      packages: 'write'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v4'
        with:
          fetch-depth: 0

      - name: 'Setup Node.js'
        uses: 'actions/setup-node@v4'
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: 'Install Dependencies'
        run: 'npm ci'

      - name: 'Get Version Info'
        id: 'version'
        env:
          GH_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        run: |
          if [[ "${{ github.event.inputs.release_type }}" == "nightly" ]]; then
            VERSION_JSON=$(node scripts/get-release-version.js --type=nightly)
          else
            # For patch/minor/major, use npm version
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            NEW_VERSION=$(npm version ${{ github.event.inputs.release_type }} --no-git-tag-version --no-commit-hooks)
            VERSION_JSON=$(cat <<EOF
          {
            "releaseTag": "${NEW_VERSION}",
            "releaseVersion": "${NEW_VERSION#v}",
            "npmTag": "latest",
            "previousReleaseTag": "v${CURRENT_VERSION}"
          }
          EOF
          )
            # Reset the version change
            git checkout -- package.json package-lock.json
          fi
          
          echo "RELEASE_TAG=$(echo "${VERSION_JSON}" | jq -r .releaseTag)" >> "${GITHUB_OUTPUT}"
          echo "RELEASE_VERSION=$(echo "${VERSION_JSON}" | jq -r .releaseVersion)" >> "${GITHUB_OUTPUT}"
          echo "NPM_TAG=$(echo "${VERSION_JSON}" | jq -r .npmTag)" >> "${GITHUB_OUTPUT}"
          echo "PREVIOUS_TAG=$(echo "${VERSION_JSON}" | jq -r .previousReleaseTag)" >> "${GITHUB_OUTPUT}"
          
          echo "Version info:"
          echo "${VERSION_JSON}" | jq .

      - name: 'Publish Release'
        uses: './.github/actions/publish-release-simple'
        with:
          release-version: '${{ steps.version.outputs.RELEASE_VERSION }}'
          release-tag: '${{ steps.version.outputs.RELEASE_TAG }}'
          npm-tag: '${{ steps.version.outputs.NPM_TAG }}'
          npm-token: '${{ secrets.NPM_TOKEN }}'
          github-token: '${{ secrets.GITHUB_TOKEN }}'
          dry-run: '${{ github.event.inputs.dry_run }}'
          previous-tag: '${{ steps.version.outputs.PREVIOUS_TAG }}'